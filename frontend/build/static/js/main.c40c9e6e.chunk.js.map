{"version":3,"sources":["components/Alert.js","pages/Upload.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Alert","msg","type","useState","show","setShow","useEffect","setInterval","className","Upload","fileInputState","setFileInputState","previewSource","setPreviewSource","selectedFile","setSelectedFile","successMsg","setSuccessMsg","errMsg","setErrMsg","previewFile","file","reader","FileReader","readAsDataURL","onloadend","result","uploadImage","base64EncodedImage","a","fetch","method","body","JSON","stringify","data","headers","console","error","onSubmit","e","preventDefault","onerror","id","name","onChange","target","files","value","src","alt","style","height","Home","imageIds","setImageIds","loadImages","res","json","map","imageId","index","key","cloudName","publicId","width","crop","App","to","component","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c40c9e6e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default function Alert({ msg, type }) {\r\n    const [show, setShow] = useState(false);\r\n    useEffect(() => {\r\n        if (msg) {\r\n            setShow(true);\r\n            setInterval(() => {\r\n                setShow(false);\r\n            }, 2000);\r\n        }\r\n    }, [msg]);\r\n    return <>{show && <div className={`alert alert-${type}`}>{msg}</div>}</>;\r\n}\r\n","import React, { useState } from 'react';\r\nimport Alert from '../components/Alert';\r\n\r\nexport default function Upload() {\r\n    const [fileInputState, setFileInputState] = useState('');\r\n    const [previewSource, setPreviewSource] = useState('');\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [successMsg, setSuccessMsg] = useState('');\r\n    const [errMsg, setErrMsg] = useState('');\r\n    const handleFileInputChange = (e) => {\r\n        const file = e.target.files[0];\r\n        previewFile(file);\r\n        setSelectedFile(file);\r\n        setFileInputState(e.target.value);\r\n    };\r\n\r\n    const previewFile = (file) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onloadend = () => {\r\n            setPreviewSource(reader.result);\r\n        };\r\n    };\r\n\r\n    const handleSubmitFile = (e) => {\r\n        e.preventDefault();\r\n        if (!selectedFile) return;\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(selectedFile);\r\n        reader.onloadend = () => {\r\n            uploadImage(reader.result);\r\n        };\r\n        reader.onerror = () => {\r\n            console.error('AHHHHHHHH!!');\r\n            setErrMsg('something went wrong!');\r\n        };\r\n    };\r\n\r\n    const uploadImage = async (base64EncodedImage) => {\r\n        try {\r\n            await fetch('/api/upload', {\r\n                method: 'POST',\r\n                body: JSON.stringify({ data: base64EncodedImage }),\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n            setFileInputState('');\r\n            setPreviewSource('');\r\n            setSuccessMsg('Image uploaded successfully');\r\n        } catch (err) {\r\n            console.error(err);\r\n            setErrMsg('Something went wrong!');\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n            <h1 className=\"title\">Upload an Image</h1>\r\n            <Alert msg={errMsg} type=\"danger\" />\r\n            <Alert msg={successMsg} type=\"success\" />\r\n            <form onSubmit={handleSubmitFile} className=\"form\">\r\n                <input\r\n                    id=\"fileInput\"\r\n                    type=\"file\"\r\n                    name=\"image\"\r\n                    onChange={handleFileInputChange}\r\n                    value={fileInputState}\r\n                    className=\"form-input\"\r\n                />\r\n                <button className=\"btn\" type=\"submit\">\r\n                    Submit\r\n                </button>\r\n            </form>\r\n            {previewSource && (\r\n                <img\r\n                    src={previewSource}\r\n                    alt=\"chosen\"\r\n                    style={{ height: '300px' }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Image } from 'cloudinary-react';\r\n\r\nexport default function Home() {\r\n  const [imageIds, setImageIds] = useState();\r\n  const loadImages = async () => {\r\n    try {\r\n      const res = await fetch('/api/images');\r\n      const data = await res.json();\r\n      setImageIds(data);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    loadImages();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">Galeria Cloudinary</h1>\r\n      <div className=\"gallery\">\r\n        {imageIds &&\r\n          imageIds.map((imageId, index) => (\r\n            <Image key={index} cloudName=\"febb-cloud-imagenes\" publicId={imageId} width=\"300\" crop=\"scale\" />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Link, Switch, Route } from 'react-router-dom';\r\nimport Upload from './pages/Upload.js';\r\nimport Home from './pages/Home.js';\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <Router>\r\n        <nav className=\"nav\">\r\n          <div className=\"nav-brand\">Cloudinary Demo</div>\r\n          <ul className=\"nav-items\">\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/\">Mi Galeria</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link to=\"/upload\">Cargar Imagen</Link>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Switch>\r\n          <Route component={Upload} path=\"/upload\" />\r\n          <Route component={Home} path=\"/\" />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './base.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}